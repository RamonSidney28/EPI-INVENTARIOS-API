name: Python CI - EPI Inventory API

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'app/**'
      - 'tests/**'
      - 'requirements.txt'
      - 'setup.cfg'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'app/**'
      - 'tests/**'
      - 'requirements.txt'
      - 'setup.cfg'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            python-version: "3.9"
          - os: ubuntu-latest
            python-version: "3.10"
          - os: ubuntu-latest
            python-version: "3.11"
          - os: windows-latest
            python-version: "3.10"
          - os: macos-latest
            python-version: "3.10"
        exclude:
          - os: windows-latest
            python-version: "3.9"
          - os: macos-latest
            python-version: "3.9"

    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      MONGODB_URL: mongodb://localhost:27017/epi_inventory_test
      PYTHONPATH: ${{ github.workspace }}/app
      PYTHONWARNINGS: ignore::DeprecationWarning

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: requirements.txt

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev libffi-dev

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip wheel setuptools
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov pytest-mock
        pip install flake8 black isort mongomock
        pip install httpx motor

    - name: Check code formatting with black
      run: |
        black --check app/ tests/ --line-length 88

    - name: Check imports sorting with isort
      run: |
        isort --check-only app/ tests/ --profile black

    - name: Lint with flake8
      run: |
        flake8 app/ tests/ \
          --count \
          --select=E9,F63,F7,F82 \
          --show-source \
          --statistics \
          --max-line-length=88 \
          --extend-ignore=E203,W503

    - name: Run unit tests with coverage
      run: |
        python -m pytest tests/unit/ \
          -v \
          --cov=app \
          --cov-report=xml \
          --cov-report=term \
          --cov-fail-under=80 \
          --asyncio-mode=auto \
          -m "unit"

    - name: Run integration tests
      run: |
        python -m pytest tests/integration/ \
          -v \
          --asyncio-mode=auto \
          -m "integration"

    - name: Run MongoDB-dependent tests
      run: |
        python -m pytest tests/ \
          -v \
          --asyncio-mode=auto \
          -k "mongodb" \
          --tb=short

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests,integration
        name: python-${{ matrix.python-version }}-${{ matrix.os }}
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.os }}-py${{ matrix.python-version }}
        path: |
          test-reports/
          coverage.xml

  quality-check:
    name: Quality Check
    runs-on: ubuntu-latest
    needs: test
    if: always()

    steps:
    - name: Download test results
      uses: actions/download-artifact@v3
      with:
        pattern: test-results-*
        path: test-results

    - name: Generate test report
      run: |
        echo "## Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "✅ All tests passed successfully!" >> $GITHUB_STEP_SUMMARY
        echo "📊 Coverage: 80%+ achieved" >> $GITHUB_STEP_SUMMARY
        echo "🐍 Python versions: 3.9, 3.10, 3.11" >> $GITHUB_STEP_SUMMARY
        echo "💻 OS tested: Ubuntu, Windows, macOS" >> $GITHUB_STEP_SUMMARY

    - name: Check test status
      run: |
        if [ "${{ needs.test.result }}" != "success" ]; then
          echo "Some tests failed. Please check the test results."
          exit 1
        fi

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [test, quality-check]
    if: github.event_name == 'pull_request' && github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Deploy to staging
      run: |
        echo "🚀 Deploying preview version..."
        # Add your deployment commands here
        # Example: docker build && docker push
